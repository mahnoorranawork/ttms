{"ast":null,"code":"var _jsxFileName = \"/Users/mahnoor/webapp/src/components/Authentication/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Alert } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigation = useNavigation();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const handleLogin = () => {\n    // In a real app, you'd perform authentication here, e.g., by making an API request to your backend.\n    // For simplicity, we'll simulate a successful login.\n\n    // Replace this with actual authentication logic.\n    const isValidUser = true; // Simulated authentication success\n\n    if (isValidUser) {\n      navigation.navigate('Home'); // Navigate to the Home screen upon successful login\n    } else {\n      Alert.alert('Login Failed', 'Invalid email or password.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(View, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n      placeholder: \"Email\",\n      value: email,\n      onChangeText: text => setEmail(text)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      value: password,\n      onChangeText: text => setPassword(text)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      title: \"Login\",\n      onPress: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"YtbbEJWwB1UmHnhlpt1l7f/vaX8=\", false, function () {\n  return [useNavigation];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","Alert","useNavigation","jsxDEV","_jsxDEV","Login","_s","navigation","email","setEmail","password","setPassword","handleLogin","isValidUser","navigate","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChangeText","text","secureTextEntry","title","onPress","_c","$RefreshReg$"],"sources":["/Users/mahnoor/webapp/src/components/Authentication/Login.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, Alert } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\n\nconst Login = () => {\n  const navigation = useNavigation();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleLogin = () => {\n    // In a real app, you'd perform authentication here, e.g., by making an API request to your backend.\n    // For simplicity, we'll simulate a successful login.\n    \n    // Replace this with actual authentication logic.\n    const isValidUser = true; // Simulated authentication success\n    \n    if (isValidUser) {\n      navigation.navigate('Home'); // Navigate to the Home screen upon successful login\n    } else {\n      Alert.alert('Login Failed', 'Invalid email or password.');\n    }\n  };\n\n  return (\n    <View>\n      <Text>Login</Text>\n      <TextInput\n        placeholder=\"Email\"\n        value={email}\n        onChangeText={(text) => setEmail(text)}\n      />\n      <TextInput\n        placeholder=\"Password\"\n        secureTextEntry\n        value={password}\n        onChangeText={(text) => setPassword(text)}\n      />\n      <Button title=\"Login\" onPress={handleLogin} />\n    </View>\n  );\n};\n\nexport default Login;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,QAAQ,cAAc;AACnE,SAASC,aAAa,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,UAAU,GAAGL,aAAa,CAAC,CAAC;EAClC,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA;;IAEA;IACA,MAAMC,WAAW,GAAG,IAAI,CAAC,CAAC;;IAE1B,IAAIA,WAAW,EAAE;MACfN,UAAU,CAACO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAC/B,CAAC,MAAM;MACLb,KAAK,CAACc,KAAK,CAAC,cAAc,EAAE,4BAA4B,CAAC;IAC3D;EACF,CAAC;EAED,oBACEX,OAAA,CAACP,IAAI;IAAAmB,QAAA,gBACHZ,OAAA,CAACN,IAAI;MAAAkB,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAClBhB,OAAA,CAACL,SAAS;MACRsB,WAAW,EAAC,OAAO;MACnBC,KAAK,EAAEd,KAAM;MACbe,YAAY,EAAGC,IAAI,IAAKf,QAAQ,CAACe,IAAI;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACFhB,OAAA,CAACL,SAAS;MACRsB,WAAW,EAAC,UAAU;MACtBI,eAAe;MACfH,KAAK,EAAEZ,QAAS;MAChBa,YAAY,EAAGC,IAAI,IAAKb,WAAW,CAACa,IAAI;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACFhB,OAAA,CAACJ,MAAM;MAAC0B,KAAK,EAAC,OAAO;MAACC,OAAO,EAAEf;IAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEX,CAAC;AAACd,EAAA,CApCID,KAAK;EAAA,QACUH,aAAa;AAAA;AAAA0B,EAAA,GAD5BvB,KAAK;AAsCX,eAAeA,KAAK;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}